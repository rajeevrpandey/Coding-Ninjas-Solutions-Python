Problem statement
What will be the output?

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
def printLL(head):
    while head is not None:
        print(head.data,end=" ")
        head = head.next



node1 = Node(10)
node2 = Node(20)
node2.next = node1
printLL(node2)

ANS: 20 10

=========================================
Problem statement
What will be the output?

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
def printLL(head):
    while head is not None:
        print(head.data,end=" ")
        head = head.next



node1 = Node(10)
node2 = Node(20)
node3 = Node(30)
node4 = Node(40)
node1.next = node2
node2.next = node3
node3.next = node4
printLL(node2)



ANS: 20 30 40

=========================================
Problem statement
What will be the output?

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def printLL(head):
    while head is not None:
        print(head.data,end=" ")
        head = head.next

def increment(head):
     temp = head
     while temp is not None:
        temp.data +=1
        temp = temp.next



node1 = Node(10)
node2 = Node(20)
node1.next = node2
increment(node1)
printLL(node1)



ANS: 11 21

=========================================
Problem statement
What will be the time complexity of searching an element in the linked list ?


ANS: O(n)

=========================================
Problem statement
Consider the Singly linked list having n elements. What will be the time taken to add an node at the end of linked list if is initially pointing to first node of the list.

That is only head is given to you.


ANS:  O(n)

=========================================
Problem statement
There is reference (or pointer) to first Node of the Linked List, then time required to insert element to second position is __________.

Indexing starts from 0.


ANS:  O(1)

=========================================
Problem statement
Given an unsorted singly Linked List, suppose you have reference (or pointer) to its head node only, which of the following operation can be implemented in O(1) time?

i)   Insertion at the front of the linked list
ii)  Insertion at the end of the linked list
iii) Deletion of the last node of the linked list
iv)  Deletion of the front node of the linked list


ANS: I and IV

=========================================
Problem statement
Given an unsorted singly Linked List, suppose you have references (or pointer) to its head and tail nodes, which of the following operation can be implemented in O(1) time?

i)   Insertion at the front of the linked list
ii)  Insertion at the end of the linked list
iii) Deletion of the last node of the linked list
iv)  Deletion of the front node of the linked list


ANS:  I, II and IV

=========================================
